val __eliom__compilation_unit_id__jVIlgs : string
module Project :
  sig
    type t = {
      samples : Gs_sample.Sample.t Gs_utils.String_map.t;
      config : Yojson.Basic.t;
    }
    val empty : t
    val iter :
      (Gs_utils.String_map.key -> Gs_sample.Sample.t -> unit) -> t -> unit
    val map : (Gs_sample.Sample.t -> Gs_sample.Sample.t) -> t -> t
    val mapi :
      (Gs_utils.String_map.key -> Gs_sample.Sample.t -> Gs_sample.Sample.t) ->
      t -> t
    val fold_sentence :
      (Gs_utils.String_map.key ->
       Gs_utils.String_map.key -> Gs_sentence.Sentence.t -> 'a -> 'a) ->
      t -> 'a -> 'a
    type size = {
      number_samples : int;
      number_sentences : int;
      number_tokens : int;
      number_trees : int;
    }
    val json_of_size :
      ?project_id:'a ->
      size -> [> `Assoc of (string * [> `Int of int | `String of 'a ]) list ]
    val size_of_json : Yojson.Basic.t -> size
    val get_size : t -> size
    val to_json :
      t ->
      [> `List of
           [> `Assoc of
                (string *
                 [> `Int of int
                  | `List of [> `String of Gs_utils.String_set.elt ] list
                  | `String of Gs_utils.String_map.key ])
                list ]
           list ]
    val users : t -> Gs_utils.String_set.t
    val sent_ids : t -> string list
  end
